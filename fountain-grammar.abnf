;; The grammar is currently ambiguous, requiring unrestricted lookahead or backtracking.
;; The "maximal-munch" rule applies: the longest match is considered the valid one.

;; Some character will be described as regular expressions character classes inside prose
;; values (i.e., <[...]>) as it's more concise than enumerating a lot of character ranges.
;; \uxxx... (unicode character in hex), \p{...}/\P{...} (having/not-having Unicode
;; property) and [:defined-set:] notations will be used.


fountain-screenplay = *empty-line [cover-page] script-content

cover-page = 1*cover-entry

cover-entry = cover-key ":" *space cover-value

cover-key = 1*<[^:[:newline-char:]]>  ; later trimmed of end spaces

cover-value = single-value / multi-value

single-value = 1*non-newline

multi-value = 1*(newline 1*space 1*non-newline)

script-content = *(section-indicator / master-scene / synopse)

section-indicator = 1*"#" *space 1*non-newline newline empty-line

master-scene = master-scene-heading scene-content

master-scene-heading = int-ext scene-description *scene-number *space newline empty-line

int-ext = ("I" (["."] "/" ["E"] / ("NT" ["."] "/EXT")) / "E" ["XT"]) ("." / space)

scene-description = *space 1*non-newline-or-hash

scene-number = "#" 1*scene-number-character "#" *space

scene-number-character = alphanumeric / "-" / "."


heading = 1*"#" *space 

power-action-line = "!" *<[^!\n]> "\n"

power-character-line = "@" 1*<[^[:newline-char:](]> ["(" <[^[:newline-char:])]> ")"] *space ["^" *space]

;power-scene-header-line = 



vtab = %x0B

ff = %x0C

newline = CR [LF]
        / LF [CR]
        / vtab    ; We interpret vertical tabbing as a newline too
        / ff      ; Same for form-feeds
        / %x0085  ; Unicode next-line
        / %x2028  ; Unicode line-separator
        / %x2029  ; Unicode paragraph-separator
        ; These are all converted into your OS's native newline at the end.

newline-char  = CR / LF / vtab / ff / %x0085 / %x2028 / %x2029 ; characters used in the former

space = SP          ; normal space
      / HTAB        ; tabulator -- converts into 4 spaces
      / %x00A0      ; non-breaking
      / %x2000-2009 ; varying-width Em/En-based spaces
      / %x202F      ; narrow non-breaking
      / %x205F      ; mathematical middle-space
      / %x3000      ; Ideographic space
      ; These are turned into one or more fixed-width spaces (SP); we're trying to imitate
      ; a typewriter.
      ; Hairline or zero-width spaces and joiners are removed previous to parsing.
      ; Same goes for any control characters not listed as space or newline.

non-newline = <re:[^[:newline-char:]]>

non-newline-or-hash = <re:[^[:newline-char:]#]>


